/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SplitScreenIndexImport } from './routes/split-screen/index'
import { Route as ModalIndexImport } from './routes/modal/index'
import { Route as ListsIndexImport } from './routes/lists/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SplitScreenIndexRoute = SplitScreenIndexImport.update({
  id: '/split-screen/',
  path: '/split-screen/',
  getParentRoute: () => rootRoute,
} as any)

const ModalIndexRoute = ModalIndexImport.update({
  id: '/modal/',
  path: '/modal/',
  getParentRoute: () => rootRoute,
} as any)

const ListsIndexRoute = ListsIndexImport.update({
  id: '/lists/',
  path: '/lists/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/lists/': {
      id: '/lists/'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof ListsIndexImport
      parentRoute: typeof rootRoute
    }
    '/modal/': {
      id: '/modal/'
      path: '/modal'
      fullPath: '/modal'
      preLoaderRoute: typeof ModalIndexImport
      parentRoute: typeof rootRoute
    }
    '/split-screen/': {
      id: '/split-screen/'
      path: '/split-screen'
      fullPath: '/split-screen'
      preLoaderRoute: typeof SplitScreenIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/lists': typeof ListsIndexRoute
  '/modal': typeof ModalIndexRoute
  '/split-screen': typeof SplitScreenIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/lists': typeof ListsIndexRoute
  '/modal': typeof ModalIndexRoute
  '/split-screen': typeof SplitScreenIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/lists/': typeof ListsIndexRoute
  '/modal/': typeof ModalIndexRoute
  '/split-screen/': typeof SplitScreenIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/lists' | '/modal' | '/split-screen'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/lists' | '/modal' | '/split-screen'
  id: '__root__' | '/' | '/lists/' | '/modal/' | '/split-screen/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ListsIndexRoute: typeof ListsIndexRoute
  ModalIndexRoute: typeof ModalIndexRoute
  SplitScreenIndexRoute: typeof SplitScreenIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ListsIndexRoute: ListsIndexRoute,
  ModalIndexRoute: ModalIndexRoute,
  SplitScreenIndexRoute: SplitScreenIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/lists/",
        "/modal/",
        "/split-screen/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/lists/": {
      "filePath": "lists/index.tsx"
    },
    "/modal/": {
      "filePath": "modal/index.tsx"
    },
    "/split-screen/": {
      "filePath": "split-screen/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
